#ifndef VAR_H
#define VAR_H

#include <QStringList>
#include <QDebug>
#include <QXmlStreamReader>
#include <QFile>
#include <QMap>
#include <QUrl>
#include <QJsonArray>
#include <QJsonObject>
#include <QJsonValue>
#include <QJsonDocument>
#include <QNetworkAccessManager>
#include <QNetworkReply>
#include <QNetworkRequest>
#include <QEventLoop>

//Класс предназначен для упрощения работы с json- и xml- форматами
class Var
{
	
public:
    Var();  //пустой конструктор
    Var(QString json);  //конструктор, принимающий на вход json-строку
    Var(QJsonDocument parser);  //--
    Var(QString string, QString name);   //конструктор, принимащий на вход структуру типа символьная строка и ее имя
    //этот конструктор переделать с параметрами (QString type, QString name)
    Var(QMap <QString,QString>,QString name);   //конструктор, принимающий на вход ассоциативный массив

    //=======================================================
    Var(QList <QString> list,QString name, QString itemName);   //конструктор, принимающий на вход список строк
    //itemName предназначен для удобства работы с xml-форматом, там itemName - тег каждой строки,
    //name - тег всего блока целиком
    //=======================================================
	
	
    QString getType() const;    //возвращает тип структуры
    QString getName() const;    //возвращает имя структуры
    void setType(QString type); //устанавливает тип структуры
    void setName(QString name); //задает имя структуры
    void setParam(QString type,QString name);   //задает и имя, и тип структуры
    void setString(QString string); //Метод устанавливает имя строки, если структура является символьной строкой

    QString getString() const;  //Метод возвращает имя строки, если структура является символьной строкой
    QList <Var> getList() const; //Метод возвращает список структур типа QList<QString>, если структура - QList
    QMap <QString, Var> getMap() const; //метод возвращает ассоциативный массив, если структуры - QMap

    int size() const;           //метод возвращает размер структуры, либо длину строки, если структура - символьная строка
	
    //=========================================================
    void insert(QString name,Var);  //Метод добавляет в структуру новый элемент
    //более корректно было бы обозвать ее append, либо добавить аргумент, который будет помещать новый элемент
    //на конкретную позицию, указанную в качестве аргумента функции
    //=========================================================
    void insert(Var);   //Перегруженный метод, добавляет в начало структуры новый элемент
    void insert(QString name, QString string);  //перегруженный метод, добавляет в начало структуры элемент string с именем name
    //может стоит переименовать 'string' на 'value'?
    //и insert изменить append, либо указывать позицию вставки?

    //=========================================================
    void unite(Var);    //Метод присоединяет к текущей структуре структуру Var, при условии, что обе структуры имеют тип QMap
    //А почему только QMap?
    //Изменить имя функции на join?
    //=========================================================
    //=========================================================
    void remove(QString name);  //Метод удаляет из структуры типа QList элемент с именем name
    //А почему только QList?
    //=========================================================

    void remove(int ind);   //метод удаляет из структуры элемент с индексом ind
    void removeEmpty(); //метод удаляет "пустые" элементы из структуры
    void clear();   //очистка структуры

    //=========================================================
    Var value(QString name);    //Метод возвращает значение элемента структуры с именем name, если структура имеет тип QMap
    //Почему только QMap?
    //=========================================================

    //=========================================================
	void append(Var);
    //аналог unite,но для QList? Может стоит привести эти функции к однообразию, например перегрузить
    //функцию append...?
    //=========================================================

    void appendNR(Var); //Метод добавляет в конец структуры  элемент, при условии, что структура имеет тип QList.
                        //Если добавляемый элемент представляет собой структуру элементов, то он добавляется как вложенный
    void appendNRinc(Var var,QString incKey);   //Метод добавляет в конец структуры элементы, указанные в качестве аргумента
                                                //непонятно назначение параметра incKey
    void inc(); //Метод увеличивает значение элемента структуры на единицу,
                //при условии, что структура – строка и инкрементируемое значение > 0.
	
    void print(int level=0);        //метод выводит на экран преобразованную структуру, где level - уровень вложенности структуры
    QString toXML();                //Метод преображает структуру в XML-формат и возвращает в виде символьной строки
    //Может имеет смысл возвращать значение функции в XML-формате, или мы с ним в QT не будем работать?
	
    bool contains(QString); //Если тип структуры QMap и он содержит в себе ключ QString, то метод возвращает true,
                            //иначе метод возвращает false
    int contains(Var);      //Если структура содержит в себе вложенную  структуру Var, метод возвращает ее порядковый
                            //номер в этой структуре при условии, что структуры имеют тип QList
    //добавить функцию, осуществляющую проверку на вхождение в структуру строки?
	
    bool operator == (QString); //Метод сравнивает структуру и символьную строку, при условии, что сравниваемая
                                //структура – строка. Если структура равна строке, метод возвращает true, иначе - false
    bool operator == (Var) const;   //Метод сравнивает две структуры. Если значения их элементов совпадают, то структуры
                                    //равны друг другу
    bool operator != (Var) const;   //Метод сравнивает две структуры. Если они не равны, то структура возвращает true,
                                    //иначе - false
    bool operator != (QString) const;   //Метод сравнивает структуру и символьную строку, при условии, что сравниваемая
                                        //структура имеет тип string. Если структура не равна строке, метод возвращает true,
                                        //иначе - false
    //==============================================
    void operator = (QString);  //Метод присваивает элементу структуры символьную строку и устанавливает тип структуры как string
    void operator +=(QString);  //Метод добавляет к структуре строку QString, если структура имеет тип string, иначе структура
                                //приобретает тип string и в нее записывается значение QString
                                //непонятно, для чего нужно?
    //==============================================
    //==============================================
    Var operator [] (int);  //Метод возвращает значение структуры с индексом int, если тип структуры - list
    Var operator [] (QString);  //Метод возвращает значение структуры с индексом QString, если тип структуры - map
    //Нужна обработка ситуаций обращения к элементу с несуществующим индексом
    //==============================================
    Var* pval(int); //Метод возвращает указатель типа Var на элемент структуры с индексом int, если тип структуры – list
    Var* pval(QString); //Метод возвращает указатель типа Var на элемент структуры с ключом QString t, если тип структуры – map
	
    int toInt() const;  //Метод конвертирует тип из QString в int при условии, что элемент структуры – строка, или
                        //сама структура имеет тип string
    QString toString()  const;  //Метод конвертирует элемент из Var в QString, при условии, что Var имеет тип string
	QVariant toQVar() const;
    Var fromQVariant(QVariant qvar);    //Метод конвертирует тип QVariant в Var

    //==============================================
    Var toLine(QString name="", int column=0) const;//Метод преображает структуру в одномерный массив, он
    //закомментирован, в нем используются приватные переменные,
    //которые были удалены из кода за ненадобностью. Данный метод
    //нужно переделать
    //==============================================
    QString toParamString();    //Метод преобразует структуру в строку типа
                                //"имя_строки1=значение_строки1[&имя_строки2=значение_строки2&….]"

    //=========================================================
    void listToMap(QString key);
    //не совсем понятно, с какими типами работает эта функция нужен QList из QMap, чтобы функция дала нужный результат?
    //переименовать в toMap?
    //=========================================================
	
    //==============================================
    void converMapToList(); //Метод конвертирует map в list при условии, что размер структуры типа map равен 1
    //Почему размер не может превышать 1?
    //==============================================
	
    void showInBrouser(QString filePath);   //=========Выпилить? Она закомменчена==========

    void importFromJsonFile(QString filePath);  //Метод загружает структуру из json-файла
    void importFromJsonString(QString json);    //Метод загружает структуру из json-строки
    void importFromJsonDocument(QJsonDocument parser);
    //==============================================
    void loadJson(QString url, Var* params=0, QString method="");   //Метод загружает структуру по ссылке url с параметрами params
                                                                    //назначение параметра method неясно мне
    //==============================================
    QJsonValue exportToJson();  //Метод конвертирует объект Value в QJson
    QString exportToJsonString();   //Метод конвертирует объект Value в json-строку типа QString

	
    void importFromXml(QString path);   //Метод загружает данные из XML-файла и возвращает их в виде объекта типа Var
    void exportToXml(QString path); //Метод сохраняет структуру в виде xml-файла
	
    Var* findByName(QString name);  //заглушка
    Var* find(QString string);  //заглушка
    Var* find(Var var); //заглушка

protected:
    QString Type;           //тип структуры
    QString Name;           //имя структуры
    QString String;         //структура-строка
    QMap <QString,Var> Map; //структура-ассоциативный массив
    QList <Var> List;       //структура-список
	
    QStringList typeList;   //структура-список символьных строк
	
    Var fromXML(QXmlStreamReader& xml); //метод преобразует xml-строку в тип Val
	
signals:
	
public slots:
	
};


#endif // VAR_H
